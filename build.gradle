plugins {
    id 'me.champeau.jmh' version '0.7.1' apply false
    id 'com.github.ben-manes.versions' version '0.49.0' apply false
    id 'org.owasp.dependencycheck' version '8.4.2' apply false
    id "com.github.spotbugs" version "5.2.1" apply false
    id 'io.morethan.jmhreport' version '0.9.0' apply false
}

ext {
    javaJwtVersion = '4.4.0'
    jwksRsaVersion = '0.22.1'
    jjwtVersion = '0.12.3'
    nimbusVersion = '9.37'
    jmhVersion = '1.37'
    oktaVersion = '0.5.7'
    fusionAuthVersion = '5.3.0'
    junitJupiterVersion = '5.10.0'
    jaxbVersion = '2.3.1'
    bouncyCastleVersion = '1.76'
    jose4jVersion = '0.9.3'
}

def buildProjects() {
    subprojects.findAll { new File(it.projectDir, 'build.gradle').file }
}

def libraryProjects() {
    buildProjects().findAll { !it.name.equals("jmh-benchmark") }
}

configure(libraryProjects()) {
    apply plugin: 'java-library'

    test {
        useJUnitPlatform {

        }
        forkEvery = 1
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    }

}

configure(buildProjects()) {
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'com.github.spotbugs'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    tasks.matching { task -> task.name.startsWith('spotbugs') }.forEach {
        it.reports {
            html.enabled = true
            xml.enabled = false
            // spotbugs does not allow to generate a xml and html report at once https://github.com/spotbugs/spotbugs/issues/857
        }
        it.excludeFilter = file("$rootDir/spotbugs-exclude.xml")
    }
}

configure(project(':jmh-benchmark')) {
    apply plugin: 'java'
    apply plugin: 'io.morethan.jmhreport'
    apply plugin: 'me.champeau.jmh'

    jmh {
        jvmArgs = ["--add-opens", "java.management/sun.management=ALL-UNNAMED", "--add-opens", "java.base/java.lang=ALL-UNNAMED"]
        resultFormat = 'JSON'

        warmup = '1s' // Time to spend at each warmup iteration.
        warmupIterations = 10

        // includes = ['JwtVerifyBenchmark']

        fork = 1
        timeOnIteration = '5s'
        iterations = 5
        benchmarkMode = ['thrpt']

        //jvmArgs = ['-XX:+UseG1GC', '-XX:+UnlockDiagnosticVMOptions', '-XX:+UseMontgomerySquareIntrinsic', '-XX:+UseMontgomeryMultiplyIntrinsic', '-XX:+UseSquareToLenIntrinsic', '-XX:+UseMultiplyToLenIntrinsic']
        jvmArgs = ['-XX:+UseG1GC']

        duplicateClassesStrategy = DuplicatesStrategy.WARN
    }

    jmhReport {
        jmhResultPath = project.file("build/results/jmh/results.json")
        jmhReportOutput = project.file("build/results/jmh")
    }

    jmhJar {
        exclude 'LICENSE'
    }

    tasks.jmh.finalizedBy tasks.jmhReport
}


configure(buildProjects()) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }


}
