plugins {
    id 'me.champeau.jmh' version '0.7.3' apply false
    id 'com.github.ben-manes.versions' version '0.52.0' apply false
    id 'io.morethan.jmhreport' version '0.9.6' apply false
}

ext {
    javaJwtVersion = '4.5.0'
    jwksRsaVersion = '0.23.0'
    jjwtVersion = '0.13.0'
    nimbusVersion = '10.5'
    jmhVersion = '1.37'
    oktaVersion = '0.5.12'
    fusionAuthVersion = '5.3.3'
    junitJupiterVersion = '5.13.4'
    jaxbVersion = '2.3.1'
    bouncyCastleVersion = '1.81'
    jose4jVersion = '0.9.6'
}

def buildProjects() {
    subprojects.findAll { new File(it.projectDir, 'build.gradle').file }
}

def libraryProjects() {
    buildProjects().findAll { !it.name.equals("jmh-benchmark") }
}

configure(libraryProjects()) {
    apply plugin: 'java-library'

    test {
        useJUnitPlatform()
        forkEvery = 1
    }

    dependencies {
        testImplementation(platform("org.junit:junit-bom:${junitJupiterVersion}"))
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
        testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
    }

}

configure(buildProjects()) {
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        mavenLocal()
        mavenCentral()
    }

}

configure(project(':jmh-benchmark')) {
    apply plugin: 'java'
    apply plugin: 'io.morethan.jmhreport'
    apply plugin: 'me.champeau.jmh'

    jmh {
        jvmArgs = ["--add-opens", "java.management/sun.management=ALL-UNNAMED", "--add-opens", "java.base/java.lang=ALL-UNNAMED"]
        resultFormat = 'JSON'

        warmup = '1s' // Time to spend at each warmup iteration.
        warmupIterations = 10

        // includes = ['JwtVerifyBenchmark']

        fork = 1
        timeOnIteration = '5s'
        iterations = 5
        benchmarkMode = ['thrpt']

        //jvmArgs = ['-XX:+UseG1GC', '-XX:+UnlockDiagnosticVMOptions', '-XX:+UseMontgomerySquareIntrinsic', '-XX:+UseMontgomeryMultiplyIntrinsic', '-XX:+UseSquareToLenIntrinsic', '-XX:+UseMultiplyToLenIntrinsic']
        jvmArgs = ['-XX:+UseG1GC']

        duplicateClassesStrategy = DuplicatesStrategy.WARN
    }

    jmhReport {
        jmhResultPath = project.file("build/results/jmh/results.json")
        jmhReportOutput = project.file("build/results/jmh")
    }

    jmhJar {
        exclude 'LICENSE'
    }

    tasks.jmh.finalizedBy tasks.jmhReport
}

configure(buildProjects()) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }
}
